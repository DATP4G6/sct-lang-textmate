{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Societal Construction Tool",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sct",
          "begin": "//",
          "end": "\n"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.sct",
          "match": "\\b(if|else|else\\bif|while|return|enter|create|destroy|exit|continue|break)\\b"
        },
        {
          "name": "keyword",
          "match": "\\b(int|float|void|Predicate)\\b"
        },
        {
          "name": "keyword.other.sct",
          "match": "\\b(species|function|decorator|state)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "entity.name.class",
          "match": "(?<=species\\s)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "entity.name.class",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=::)"
        },
        {
          "name": "support.function",
          "match": "(?<=state\\s)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "support.function",
          "match": "(?<=enter\\s+)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "support.function",
          "match": "(?<=::)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "support.function",
          "match": "(?<=\\=\\>\\s+)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "support.function",
          "match": "(?<=decorator\\s)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "support.function",
          "match": "(@[a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "entity.name.function",
          "match": "(?<=function\\s)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "entity.name.function",
          "match": "(?<!::)\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b\\("
        },
        {
          "name": "variable",
          "match": "([a-zA-Z_][a-zA-Z0-9_]+)"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "([0-9]+)"
        },
        {
          "name": "constant.numeric",
          "match": "([0-9]+\\.[0-9]+)"
        }
      ]
    }
  },
  "scopeName": "source.sct"
}
